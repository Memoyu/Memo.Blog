# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
 tags:
   include:
     - release-*

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  containerName: blogapi
  imageName: memoyu/memo-blog
  appsettings: src/Memo.Blog.WebApi/appsettings.Production.json

stages:
- stage: Build
  displayName: build
  jobs:
  - job: Build
    displayName: build image
    pool:
      vmImage: ubuntu-latest
    steps:
    - script:  |
        echo ready to execute command
        ls
        sed -i 's/{mysql-conn}/$(mysql-conn)/g' $(appsettings)
        sed -i 's/{redis-conn}/$(redis-conn)/g' $(appsettings)
        sed -i 's/{mongodb-conn}/$(mongodb-conn)/g' $(appsettings)
        sed -i 's/{jwt-secret}/$(jwt-secret)/g' $(appsettings)
        sed -i 's/{qiniu-ak}/$(qiniu-ak)/g' $(appsettings)
        sed -i 's/{qiniu-sk}/$(qiniu-sk)/g' $(appsettings)
        sed -i 's/{github-token}/$(github-token)/g' $(appsettings)
        echo "================= print file $(appsettings) start ===================="
        cat $(appsettings) | while read line; do echo $line ; done
        echo "================= print file $(appsettings) end ===================="
        echo command executed
    - task: Docker@2
      displayName: 'build docker image and push'
      inputs:
        containerRegistry: 'cloud_service'
        repository: $(imageName)
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        buildContext: $(Build.Repository.LocalPath)
        tags: 'latest'
    - task: SSH@0
      displayName: 'run blog api container'
      inputs:
        sshEndpoint: 'cloud_service'
        runOptions: 'inline'
        inline: |
          echo "================= to del container ===================="
          # 判断是否存在容器
          docker ps | grep $(containerName) &> /dev/null
          # 如果不存在，则Remove
          if [ $? -ne 0 ]
          then
              echo "$(containerName) container not exist continue.. "
          else
              echo "remove $(containerName) container"
              docker kill $(containerName)
              docker rm $(containerName)
          fi

          echo "================= to rm image ===================="
          # 判断是否存在镜像
          docker images | grep registry.cn-shenzhen.aliyuncs.com/$(imageName) &> /dev/null
          # 如果不存在，不做操作
          if [ $? -ne 0 ]
          then
              echo "image does not exist , continue..."
          else
              echo "image exists !!! remove it"
              docker rmi registry.cn-shenzhen.aliyuncs.com/$(imageName)
          fi

          echo "================= to pull image ===================="
          docker pull registry.cn-shenzhen.aliyuncs.com/$(imageName)

          echo "================= to run container ===================="
          docker run --restart=always --name $(containerName) -d -p 9700:8080 registry.cn-shenzhen.aliyuncs.com/$(imageName)
          # 进行时区同步
          # docker cp /usr/share/zoneinfo/Asia/Shanghai $(containerName):/etc/localtime
          # echo 'Asia/Shanghai' >/etc/timezone && docker cp /etc/timezone $(containerName):/etc/timezone 
          echo "================= publish success ===================="
        readyTimeout: '20000'
